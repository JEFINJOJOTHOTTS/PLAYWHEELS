<%- include('./adminParsels/head.ejs') %>
    <!-- Add Cropper.js CSS -->
    <link rel="stylesheet" href="https://unpkg.com/cropperjs/dist/cropper.min.css">

    <!-- Add jQuery (required by Cropper.js) -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <!-- Add Cropper.js -->
    <script src="https://unpkg.com/cropperjs/dist/cropper.min.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.1.5/dist/sweetalert2.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.1.5/dist/sweetalert2.min.js"></script>


    </head>
    <style>
        .image-preview-container {
            width: 150px;
            /* Adjust the width as needed */
            height: 150px;
            /* Adjust the height as needed */
            overflow: hidden;
            margin-top: 20px;
            justify-content: center;
            justify-items: center;
            text-align: center;
            display: none;
        }

        #imagePreview {
            width: 100%;
            height: 100%;
            object-fit: cover;
            display: none;
        }
    </style>

    <body class="bgCol">
        <div class="pt-5 pb-5">--</div>
        <!-- Main Content -->
        <div
            class="row mt-5 container-fluid col-xs-12 col-sm-12 login_form  row user-management  text-center container-fluid">

            <div class="row pt-2">
                <h2>Add Category</h2>
            </div>

            <form id="categoryForm" class="container  text-center" onsubmit="return validateForm(event)"
                action="/admin/editCategory" method="POST" enctype="multipart/form-data">
                <!-- 
            <form class="container  text-center" onsubmit="return validateForm()" action="/admin/addCategory"
                method="POST" enctype="multipart/form-data"> -->
                <div class="row  justify-content-center">
                    <div class="col-11 mt-3 justify-content-center d-flex">
                        <div class="col-md-5 align-items-center mr-md-4">
                            <div class="row ">
                                <label for="exampleFormControl" class="mb-0 mt-1">Category Name</label>
                                <input type="name" name="Name" id="name" value="<%=sub[0].Name%>"
                                    oninput="nameValidation()" class="form__input mt-0 mb-4"
                                    placeholder="Category Name">
                                <span id="nameError" class="text-danger"></span>
                                <input type="text" style="display: none;" value="<%=sub[0].Name%>" id="categoryName">
                            </div>
                        </div>
                    </div>
                    <div class="col-md-5 mr-md-4 child-div" style="display:none;">

                        <div class="card mb-4 ">
                            <div class="card-header ">
                                <h4>Media</h4>
                            </div>
                            <div class="input-upload">
                                <img src="/imgs/theme/upload.svg" class="img-fluid child-div" id="imgView1" alt="abc">
                                <input class="form-control" id="input1" onchange="viewImage1(event),viewImage(event, 1)"
                                    type="file">
                            </div>
                            <div class="image-cropper " style="display:none;">
                                <img src="" class="img-fluid" id="croppedImg1" alt="">
                                <button type="button" id="saveButton1" class="btn-sm btn-primary">Save</button>
                            </div>

                        </div>
                    </div>
                    <div class="col-md-5 mr-md-4">
                        <div class="row mt-2 ">

                            <label for="exampleFormControl" class="mb-0 mt-1">Upload Image</label>
                            <!-- <input type="file" accept="image/*" class="form-control-file ml-3" />
                            <small class="form-text text-muted ml-3">image format .jpeg</small> -->

                            <input id="image" name="Image" onchange="imageValidation()" class="form-control-file ml-3"
                                type="file" name="Image" accept="image/*">
                            <small class="form-text text-muted ml-3">image format .jpg,.png,.gif,.jpeg</small>
                            <span id="imageError" class="text-danger" style="max-width: 100%; height: auto;"></span>

                            <!-- src="/public/uploads/<%=sub[0].Image%>" -->

                        </div>
                        <div class="row image-preview-container ml-auto mr-auto" style="display: block;"><img
                                id="imagePreview" src="" alt="Image Preview" class="src">
                        </div>


                    </div>
                    <div class="col-md-5 mr-md-4 justify-content-center text-left">

                        <label for="exampleFormControl" class="ml-0 mb-0 mt-1">Sub Category</label>
                        <% sub.forEach(function(item) { %>
                        <div class="row" id="form-fields">
                            
                                  
                            <div class="d-flex pl-3">
                                <input type="text" name="Sub" id="sub" value="<%=item.Sub%>"
                                    class="sub form-control form__input pl-2 mt-0 mb-4" placeholder="Static Field">
                                    <input type="text" style="display: none;" name="<%=item._id%>">
                            </div>
                        </div><%})%>

                        <span id="subError" class="text-danger"></span>

                        <!-- <div class="row" id="form-fields"><label for="exampleFormControl"
                                class="mb-0 mt-1">Sub-Categories</label>


                            <input type="text" name="Sub" class="form-control form__input  mt-0 mb-4"
                                placeholder="Field 1">

                        </div> -->
                        <!-- <button type="button" class="btn btn-primary mt-2" id="add-field">Add Field</button> -->
                    </div>

                </div>


                <button type="submit" class="btn">Add New Sub-Category</button>

            </form>

            <div class="row">
                <p><a href="/admin/category">Back </a></p>
            </div>

            <!-- Footer -->
        </div>

        <script>

            const maxFields = 5;
            let fieldCount = 1;

            document.getElementById('add-field').addEventListener('click', function () {
                if (fieldCount < maxFields) {
                    const formFields = document.getElementById('form-fields');
                    const newField = document.createElement('div');
                    newField.innerHTML = `<div class="d-flex col-12 justify-content-center align-items-center">
        <input type="text" name="Sub" id="subField" class="subField form-control form__input pl-2 mt-0 mb-4" placeholder="New Field">
        <button type="button" class="btn btn-danger mt-0 mb-4 btn-remove">Remove</button>
    </div>`;
                    //console.log(document.getElementById(`subField${fieldCount}`));
                    formFields.appendChild(newField);

                    // Add event listener to remove button
                    const removeButton = newField.querySelector('.btn-remove');
                    removeButton.addEventListener('click', function () {
                        formFields.removeChild(newField);
                        fieldCount--;
                    });
                    fieldCount++;
                } else {
                    alert('Maximum number of fields reached (5)');
                }
            });
            const categoryName = document.getElementById("categoryName")

            const name = document.getElementById("name")
            const sub = document.getElementById("sub")
            const subFields = document.getElementsByClassName(`subField`)
            const subError = document.getElementById(`subError`)


            async function subCategoryValidation() {
                console.log(subFields, "jjjjjjjjjjjjjjjjjjjjj", subFields.length)
                //sub category 
                if (subFields && subFields.length > 0) {
                    console.log("adfdsssssssssssssssssss")
                    const subCat = sub.value
                    if (subCat.trim() == 0) {
                        sub.style.color = "red";
                        subError.style.color = "red";
                        subError.innerHTML = "If category exist fill top to bottom"
                        return false;
                    }

                    if (!subCat.match(categorySubPattern)) {
                        sub.style.color = "red";
                        subError.style.color = "red";
                        subError.innerHTML = "Invalid Input"
                        return false;
                    }
                    sub.style.color = "#1e3932";
                    subError.innerHTML = "";
                    if (subFields.length === 1) {
                        let subCat = subField.value
                        if (subCat.trim() == 0) {
                            subField.style.color = "red";
                            subError.style.color = "red";
                            subError.innerHTML = "If sub-category exist fill top to bottom"
                            return false;
                        }

                        if (!subCat.match(categorySubPattern)) {
                            subField.style.color = "red";
                            subError.style.color = "red";
                            subError.innerHTML = "Invalid Input"
                            return false;
                        }
                        if (!await subSameValidaion()) {
                            subField.style.color = "red";
                            subError.style.color = "red";
                            subError.innerHTML = "Does not repeat same Sub-Category"
                            return false;
                        }
                        sub.style.color = "#1e3932";

                        subError.innerHTML = ""


                    } else {
                        let subSet = new Set()

                        for (let i = 0; i < subFields.length; i++) {

                            let subCat = subField[i].value
                            if (subCat.trim() == 0) {
                                subField[i].style.color = "red";
                                subError.style.color = "red";
                                subError.innerHTML = "If sub-category exist fill top to bottom"
                                return false;
                            }

                            if (!subCat.match(categorySubPattern)) {
                                subField[i].style.color = "red";
                                subError.style.color = "red";
                                subError.innerHTML = "Invalid Input"
                                return false;
                            }
                            subField[i].style.color = "#1e3932";
                            subSet.add(subCat.trim())

                        }
                        if (!await subFieldValidation(subSet)) {
                            subError.style.color = "red";
                            subError.innerHTML = "Does not repeat same Sub-Category"
                            return false;
                        }
                        subError.innerHTML = ""


                    }
                    console.log("sub okey")
                    return true


                } else {
                    console.log("yyyyyyyyyyyyyyyy")
                    let subCat = sub.value
                    if (!subCat.match(categorySubPattern)) {
                        sub.style.color = "red";
                        subError.style.color = "red";
                        subError.innerHTML = "Invalid Input"
                        return false;
                    }
                    sub.style.color = "#1e3932";
                    subError.innerHTML = ""
                    console.log("sub okey")
                    return true
                }
            }


            const categoryNameExist = async () => {

                const result = await axios.get('/admin/validCategoryName/' + name.value);

                console.log("qqqqqqqqqqqqqqqqqqqqq", result);
                if (result.data === "Exist" && !(categoryName.value === name.value)) {
                    nameError.innerHTML = "Existing Category"
                    return false

                } else {
                    console.log("continue")
                    return true
                }
            }


            //onSubmition
            async function validateForm(event) {
                event.preventDefault()
                console.log(1);

                // if (nameValidation()) console.log("name")

                // if (categoryNameExist()) { console.log("category not Exist") } else {
                //     console.log("category Exist")
                // }
                // if (subCategoryValidation()) console.log(" sub true")
                // if (finalImageValidation()) console.log("image")

                const validCategory = async function () {

                    const v1 = await nameValidation()
                    const v2 = await categoryNameExist()
                    const v3 = await subCategoryValidation()
                    const v4 = await finalImageValidation()

                    console.log(v1);
                    console.log(v2);
                    console.log(v3);
                    console.log(v4);

                    if (v1 && v2 && v3 && v4) {

                        return true;

                    } else {

                        return false;

                    }
                }

                console.log("hhhhhhhhhhhhhhhh", await validCategory());

                if (await validCategory()) {
                    console.log("success")
                    document.getElementById("categoryForm").submit();
                } else {
                    console.log("fail")
                    return false
                }
            }


            //imageValidation
            const previewContainer = document.querySelector('.image-preview-container');
            const previewImage = document.querySelector('#imagePreview');

            function finalImageValidation() {
                var fileInput = document.getElementById('image');

                var filePath = fileInput.value;
                console.log("filePath", filePath)
                var allowedExtensions = /(\.JPG|\.jpg|\.jpeg\.png|\.gif)$/i;
                if (!(filePath.trim() === '')) {
                    if (!allowedExtensions.exec(filePath)) {
                        var erer = document.getElementById('imageError');
                        erer.innerHTML = '<i class="fa fa-close"></i> Sorry, only accepted files are .jpg,.png,.gif,.jpeg ';
                        fileInput.value = '';
                        return false;
                    } else {
                        console.log("image validated")
                        return true
                    }
                } else {
                    console.log("image validated")
                    return true
                }

            }

            function imageValidation() {
                var fileInput = document.getElementById('image');

                var filePath = fileInput.value;
                var allowedExtensions = /(\.jpg|\.jpeg\.png|\.gif)$/i;
                if (!(filePath.trim() === '')) {
                    if (!allowedExtensions.exec(filePath)) {
                        var erer = document.getElementById('imageError');
                        erer.innerHTML = '<i class="fa fa-close"></i> Sorry, only accepted files are .jpg,.png,.gif,.jpeg ';
                        fileInput.value = '';
                        return false;
                    } else {
                        console.log("image validated")
                        return true
                    }
                } else {
                    console.log("image validated")
                    return true
                }

            }
            const categoryNamePattern = /^[A-Za-z' - . ,]{1,30}$/;
            const categorySubPattern = /^[A-Za-z()"' , - .]{0,30}$/;
            const nameError = document.getElementById("nameError")


            //First Name validation
            function nameValidation() {
                const nameValue = name.value
                if (nameValue.trim() == 0) {
                    name.style.color = "red";
                    nameError.style.color = "red";
                    nameError.innerHTML = "Category Name Can not be blank"
                    return false;
                }

                if (!nameValue.match(categoryNamePattern)) {
                    name.style.color = "red";
                    nameError.style.color = "red";
                    nameError.innerHTML = "Invalid Input"
                    return false;
                }


                //   console.log("first name")
                name.style.color = "#1e3932";
                nameError.innerHTML = ""

                console.log("name validate")
                return true
            }

            // function viewImage1(event) {
            //     document.getElementById('imgView1').src = URL.createObjectURL(event.target.files[0])
            // }

            //image crop


            // function viewImage(event, index) {
            //     let input = event.target;
            //     let reader = new FileReader();

            //     reader.onload = function () {
            //         let dataURL = reader.result;
            //         let image = document.getElementById('imgView' + index);
            //         image.src = dataURL;

            //         // Initialize Cropper.js on the image
            //         let cropper = new Cropper(image, {
            //             aspectRatio: 1 / 1, // Set the aspect ratio to 1:1 for square images
            //             viewMode: 1, // Set the view mode to crop box
            //             guides: true, // Show the crop guides
            //             background: false, // Do not show the background behind the image
            //             autoCropArea: 1, // Set the initial crop area to cover the whole image
            //             zoomable: true // Disable zooming to keep the image size fixed
            //         });

            //         // Show the image cropper container
            //         let cropperContainer = document.querySelector('#croppedImg' + index).parentNode;
            //         cropperContainer.style.display = 'block';

            //         // Update the cropped image when the "Save" button is clicked
            //         let saveButton = document.querySelector('#saveButton' + index);
            //         saveButton.addEventListener('click', async function () {
            //             let croppedCanvas = cropper.getCroppedCanvas({
            //                 width: 1500,
            //                 height: 1500
            //             });
            //             let croppedImage = document.getElementById("croppedImg" + index);
            //             croppedImage.src = croppedCanvas.toDataURL('image/jpeg', 1.0);

            //             // Generate a unique name for the cropped image file based on the current timestamp
            //             let timestamp = new Date().getTime();
            //             let fileName = `cropped-img-${timestamp}-${index}.png`;

            //             await croppedCanvas.toBlob(blob => {
            //                 let input = document.getElementById('input' + index)
            //                 let imgFile = new File([blob], fileName, blob)
            //                 const fileList = new DataTransfer();
            //                 fileList.items.add(imgFile);
            //                 input.files = fileList.files
            //             });
            //             // cropperContainer.style.display = 'none';
            //         });

            //     };

            //     reader.readAsDataURL(input.files[0]);
            // }

            function subSameValidaion() {
                if (sub.value === subField.value) {
                    console.log("sub failed")
                    return false
                }
                return true
            }
            async function subFieldValidation(subSet) {
                const actualLength = subField.length
                // console.log("actualLength", subField, "   setSubFelds : ", setSubFields.size)

                if (actualLength !== subSet.length || subSet.has(sub.valuetrim())) {
                    console.log("subField failed")
                    return false
                }
                return true
            }
        </script>
        <!-- <script src="../admin-assets/js/vendors/jquery-3.6.0.min.js"></script>
        <script src="../admin-assets/js/vendors/bootstrap.bundle.min.js"></script>
        <script src="../admin-assets/js/vendors/select2.min.js"></script>
        <script src="../admin-assets/js/vendors/perfect-scrollbar.js"></script>
        <script src="../admin-assets/js/vendors/jquery.fullscreen.min.js"></script> -->
        <!-- Main Script -->
        <!-- <script src="../admin-assets/js/main.js" type="text/javascript"></script> -->

    </body>

    </html>