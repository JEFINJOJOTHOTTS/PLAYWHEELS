<%- include('./adminParsels/head.ejs') %>

    </head>
    <style>
        .col-md-10.row {
            display: flex;
            /* Use flexbox to display the columns in the same row */
            justify-content: flex-start;
            /* Adjust alignment as needed */
            align-items: center;
            /* Adjust alignment as needed */
        }

        .image-preview-container {
            width: 150px;
            /* Adjust the width as needed */
            height: 150px;
            /* Adjust the height as needed */

            /* Adjust the height as needed */
            overflow: hidden;
            margin-top: 20px;
            text-align: center;
            display: inline-block;
            /* Display containers inline */
        }

        .image-preview-container img {
            width: auto;
            /* Allow each image to adjust to its content width */
            height: 100%;
            /* Maintain the aspect ratio */
            object-fit: cover;
            display: inline-block;
            /* Display images inline */
            margin-right: 10px;
            /* Adjust the spacing between images */
        }


        #profileImageModal .modal-body {
            min-height: 200px;
            max-height: 200px;
        }

        .imgdiv {
            height: 200px !important;
            width: 200px !important;
        }

        #profilePicture {
            margin-top: 0px;
            border: 1px solid red;
            min-height: 200px;
            min-width: 200px;
            max-height: 200px;
            max-width: 200px;
        }
    </style>
    <script>
        // var cropper;
        // $(document).ready(function () {
        //     //cropper Start
        //     $('#imgdiv').hide();
        //     $('#croppedimg').hide();

        //     $('#image').on("change", function (e) {
        //         console.log(e);
        //         ratio = 1 / 1;
        //         croppingimg(e, ratio);
        //     });

        //     function croppingimg(e, ratio) {
        //         var imgsrc = URL.createObjectURL(e.target.files[0])
        //         if (imgsrc) {
        //             // console.log(imgsrc);
        //             $('#imagecan').attr("src", imgsrc);
        //             $('#imgdiv').show();
        //             var image = document.getElementById('imagecan');
        //             if (cropper) {
        //                 cropper.destroy();
        //             }
        //             cropper = new Cropper(image, {
        //                 viewMode: 1,
        //                 aspectRatio: ratio,
        //                 dragMode: 'move',
        //                 cropBoxMovable: false,
        //                 cropBoxResizable: false,
        //                 checkOrientation: false,
        //                 viewMode: 1,
        //                 crop: function (event) {
        //                     var url = cropper.getCroppedCanvas({
        //                         width: 200,
        //                         height: 200,
        //                     }).toDataURL();
        //                     $('#cropped').attr("src", url);
        //                     $('#croppedimg').show();
        //                     window.URL.revokeObjectURL(imgsrc);
        //                 }
        //             });
        //         }
        //     }
        //     //cropper end
        // });

        // function onClickUpload() {
        //     console.log('test')
        //     var profileImage;
        //     if (cropper.getCroppedCanvas()) {
        //         cropper.getCroppedCanvas().toBlob(function (blob) {
        //             // profileImage = new FormData();
        //             // profileImage.append('profileImage', blob, "profileImage");
        //             var url = cropper.getCroppedCanvas().toDataURL();
        //             console.log(url);
        //             // $('.showloading').show();
        //             // $.ajax({
        //             //     url: "{!!url('user/insertimage')!!}",
        //             //     data: profileImage,
        //             //     type: "POST",
        //             //     processData: false,
        //             //     contentType: false,
        //             //     headers: {
        //             //         'X-CSRF-TOKEN': "{{ csrf_token() }}"
        //             //     },
        //             //     success: function (result) {
        //             // $('.showloading').hide();
        //             if (cropper) {
        //                 cropper.destroy();
        //                 $('#croppedimg').hide();
        //                 $('#imgdiv').hide();
        //             }
        //             // if (result['code'] == 200) {
        //             $('#profileImageModal').modal('toggle');
        //             $('#profilePicture').removeAttr('src')
        //             $('#profilePicture').attr('src', url);
        //             // $('#headerProfileImage').attr('src', url);
        //             $('#image').val("");
        //             // toastr.success("Image Upadated");
        //             // } else {
        //             //     alert(result['code'] + ":" + result['massage'])
        //             //     $('#profileImageModal').modal('toggle');
        //             //     // toastr.error("Something went wrong. Please try again");
        //             // }
        //             // },
        //             // error: function (jqXHR, textStatus, errorThrown) {
        //             //      $('.showloading').hide();
        //             //     console.log(jqXHR);
        //             //     toastr.error("Something went wrong. Please try again");
        //             //     // alert(jqXHR.status + ":" + textStatus + ":" + errorThrown);
        //             // }
        //             // });
        //         }, 'image/png');
        //     }
        // }

        // // Function to handle image view and cropper initialization
        // function viewImage(event, index) {
        //     let input = event.target;
        //     let reader = new FileReader();

        //     reader.onload = function () {
        //         let dataURL = reader.result;
        //         let image = document.getElementById('imgView' + index);
        //         image.src = dataURL;

        //         // Initialize Cropper.js on the image
        //         let cropper = new Cropper(image, {
        //             aspectRatio: 1 / 1, // Set the aspect ratio to 1:1 for square images
        //             viewMode: 1, // Set the view mode to crop box
        //             guides: true, // Show the crop guides
        //             background: false, // Do not show the background behind the image
        //             autoCropArea: 1, // Set the initial crop area to cover the whole image
        //             zoomable: true // Disable zooming to keep the image size fixed
        //         });

        //         // Show the image cropper container
        //         let cropperContainer = document.querySelector('#croppedImg' + index).parentNode;
        //         cropperContainer.style.display = 'block';

        //         // Update the cropped image when the "Save" button is clicked
        //         let saveButton = document.querySelector('#saveButton' + index);
        //         saveButton.addEventListener('click', async function () {
        //             let croppedCanvas = cropper.getCroppedCanvas({
        //                 width: 200,
        //                 height: 200
        //             });
        //             let croppedImage = document.getElementById("croppedImg" + index);
        //             croppedImage.src = croppedCanvas.toDataURL('image/jpeg', 1.0);

        //             // Generate a unique name for the cropped image file based on the current timestamp
        //             let timestamp = new Date().getTime();
        //             let fileName = `cropped-img-${timestamp}-${index}.png`;

        //             await croppedCanvas.toBlob(blob => {
        //                 let input = document.getElementById('input' + index)
        //                 let imgFile = new File([blob], fileName, blob)
        //                 const fileList = new DataTransfer();
        //                 fileList.items.add(imgFile);
        //                 input.files = fileList.files
        //             });
        //             // cropperContainer.style.display = 'none';
        //         });
        //     };

        //     reader.readAsDataURL(input.files[0]);
        // }
    </script>
    <!-- <script>
        var cropper;
        $(document).ready(function () {
            //cropper Start
            $('#imgdiv').hide();
            $('#croppedimg').hide();

            $('#image').on("change", function (e) {
                console.log(e);
                ratio = 1 / 1;
                croppingimg(e, ratio);
            });

            function croppingimg(e, ratio) {
                var imgsrc = URL.createObjectURL(e.target.files[0])
                if (imgsrc) {
                    // console.log(imgsrc);
                    $('#imagecan').attr("src", imgsrc);
                    $('#imgdiv').show();
                    var image = document.getElementById('imagecan');
                    if (cropper) {
                        cropper.destroy();
                    }
                    cropper = new Cropper(image, {
                        viewMode: 3,
                        aspectRatio: ratio,
                        dragMode: 'move',
                        cropBoxMovable: false,
                        cropBoxResizable: false,
                        checkOrientation: false,
                        viewMode: 1,
                        crop: function (event) {
                            var url = cropper.getCroppedCanvas({
                                width: 100,
                                height: 100,
                            }).toDataURL();
                            $('#cropped').attr("src", url);
                            $('#croppedimg').show();
                            window.URL.revokeObjectURL(imgsrc);
                        }
                    });
                }
            }
            //cropper end
        });
        function onClickUpload() {
            console.log('test')
            var profileImage;
            if (cropper.getCroppedCanvas()) {
                cropper.getCroppedCanvas().toBlob(function (blob) {
                    // profileImage = new FormData();
                    // profileImage.append('profileImage', blob, "profileImage");
                    var url = cropper.getCroppedCanvas().toDataURL();
                    console.log(url);
                    // $('.showloading').show();
                    // $.ajax({
                    //     url: "{!!url('user/insertimage')!!}",
                    //     data: profileImage,
                    //     type: "POST",
                    //     processData: false,
                    //     contentType: false,
                    //     headers: {
                    //         'X-CSRF-TOKEN': "{{ csrf_token() }}"
                    //     },
                    //     success: function (result) {
                    // $('.showloading').hide();
                    if (cropper) {
                        cropper.destroy();
                        $('#croppedimg').hide();
                        $('#imgdiv').hide();
                    }
                    // if (result['code'] == 200) {
                    $('#profileImageModal').modal('toggle');
                    $('#profilePicture').removeAttr('src')
                    $('#profilePicture').attr('src', url);
                    // $('#headerProfileImage').attr('src', url);
                    $('#image').val("");
                    // toastr.success("Image Upadated");
                    // } else {
                    //     alert(result['code'] + ":" + result['massage'])
                    //     $('#profileImageModal').modal('toggle');
                    //     // toastr.error("Something went wrong. Please try again");
                    // }
                    // },
                    // error: function (jqXHR, textStatus, errorThrown) {
                    //      $('.showloading').hide();
                    //     console.log(jqXHR);
                    //     toastr.error("Something went wrong. Please try again");
                    //     // alert(jqXHR.status + ":" + textStatus + ":" + errorThrown);
                    // }
                    // });
                }, 'image/png');
            }
        }
    </script> -->

    <body class="bgCol">

        <!-- Main Content -->
        <div
            class="row container-fluid col-xs-12 col-sm-12 login_form  row user-management  text-center container-fluid">

            <div class="row pt-2">
                <h2>Add Product</h2>
            </div>

            <form class="container  text-center" action="/admin/addProduct"
                onsubmit="return addProductFormValidation(event)" method="POST" id="addProduct"
                enctype="multipart/form-data">
                <!-- <form class="container  text-center" action="/admin/addProduct" method="POST" id="addProduct"
                enctype="multipart/form-data"> -->
                <div class="row  justify-content-center">
                    <div class="col-md-5 mr-md-4">
                        <div class="row">
                            <label for="exampleFormControl" class="mb-0 mt-1">Product Name</label>
                            <input type="name" name="Name" id="name" oninput="productNameValidation()"
                                class="form__input mt-0 mb-4" placeholder="Product Name">
                            <span id="productError" class="text-danger"></span>

                        </div>
                    </div>
                    <div class="col-md-5 ml-md-4">
                        <div class="row">
                            <label for="exampleFormControl" class="mb-0 mt-1">Manufactured By</label>
                            <input type="name" name="Manufacturer" oninput="manufacturerValidation()" id="manufacturer"
                                class="form__input mt-0 mb-4" placeholder="Manufatured By">
                            <span id="manufacturerError" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="col-md-5 mr-md-4">
                        <div class="row">
                            <label for="exampleFormControl" class="mb-0 mt-1">Category</label>
                            <select id="category" class="form-select form__input mt-0 mb-4"
                                onchange="callSub(this.value)" name="Category">
                                <option selected>Open this select menu</option>
                                <% Category.forEach( function(category) { %>
                                    <option value="<%= category%>">
                                        <%= category%>
                                    </option>
                                    <% } ); %>
                            </select><span id="categoryError" class="text-danger"></span>

                        </div>
                    </div>
                    <div class="col-md-5 ml-md-4">
                        <div class="row">
                            <label for="exampleFormControl" class="mb-0 mt-1">Sub-Category</label>
                            <select class="form-select form__input mt-0 mb-4" onchange="subValidation()"
                                id="Sub-Category" name="SubCategory">

                            </select>
                            </select><span id="subError" class="text-danger"></span>

                        </div>
                    </div>
                    <div class="col-md-10 mr-md-4 ">
                        <div class="row">
                            <label for="exampleFormControl" class="mb-0 mt-1">Dimensions </label>
                        </div>
                        <div class="row">
                            <div class="col-md-3 mr-md-4">
                                <div class="row">
                                    <small for="exampleFormControl" class="mb-0 mt-0">Lenght</small>
                                    <input type="text" oninput="lenghtValidation()" name="Length" id="length"
                                        class="form__input mt-0 mb-4 pt-0 pb-1 pl-1 ml-0" style="width: 70%;" />
                                    cm</small>
                                </div>
                            </div>
                            <div class="col-md-3 mr-md-4">
                                <div class="row">
                                    <small for="exampleFormControl" class="mb-0 mt-0">Width</small>
                                    <input type="text" oninput="widthValidation()" name="Width" id="width"
                                        class="form__input mt-0 mb-4 ml-0 pb-1 pt-0 pl-1" style="width: 70%;" />
                                    cm</small>
                                </div>
                            </div>
                            <div class="col-md-3 mr-md-4">
                                <div class="row">
                                    <small for="exampleFormControl" class="mb-0 mt-0">Height</small>
                                    <input type="text" oninput="heightValidation()" name="Height" id="height"
                                        class="form__input mt-0 mb-4 pl-1 pt-0 pb-1 ml-0" style="width: 70%;" />
                                    cm</small>
                                </div>
                            </div>
                            <span id="dimensionsError" class="text-danger"></span>

                        </div>
                    </div>
                </div>
                <div class="row  justify-content-center">
                    <div class="col-md-5 mr-md-4">
                        <div class="row">
                            <label for="exampleFormControl" class="mb-0 mt-1">Color</label>
                            <input type="name" name="Color" id="color" oninput="colorValidation()"
                                class="form__input mt-0 mb-4" placeholder="Color">
                            <span id="colorError" class="text-danger"></span>

                        </div>
                    </div>
                    <div class="col-md-5 ml-md-4">
                        <div class="row">
                            <label for="exampleFormControl" class="mb-0 mt-1">Price</label>
                            <input type="text" oninput="priceValidation()" name="Price" id="price"
                                class="form__input mt-0 mb-4" placeholder="Price">
                            <span id="priceError" class="text-danger"></span>

                        </div>
                    </div>
                    <div class="col-md-5 mr-md-4">
                        <div class="row">
                            <label for="exampleFormControl" class="mb-0 mt-1">Available Stock</label>
                            <input type="text" oninput="stockValidation()" name="Stock" id="stock"
                                class="form__input mt-0 mb-4" placeholder="Stock">
                            <span id="stockError" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="col-md-5 ml-md-4">
                        <div class="row">
                            <label for="exampleFormControl" class="mb-0 mt-1">Discount percentage</label>
                            <select id="discount" class="form-select form__input pt-4 mt-0 mb-4" name="Discount">
                                <% for(let i=0;i<=80;i++){ %>
                                    <option value="<%= i%>">
                                        <%= i%> %
                                    </option>
                                    <% } ; %>
                            </select>
                        </div>
                    </div>


                    <div class="col-md-5 mr-md-4">
                        <div class="row">
                            <label for="exampleFormControl" class="mb-0 mt-1">Offer End Date</label>
                            <input type="datetime-local" name="DiscountExpiry" id="DiscountExpiry" class="form__input mt-0 mb-4" required />
                            <span id="dateError" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="col-md-10 ml-md-4">
                        <div class="row mt-2 ">

                            <label for="exampleFormControl" class="mb-0 mt-1">Upload Image</label>
                            <!-- <input type="file" accept="image/*" class="form-control-file ml-3" />
                            <small class="form-text text-muted ml-3">image format .jpeg</small> -->

                            <input id="image" name="Image" onchange="imageValidation()" class="form-control-file ml-3"
                                type="file" accept="image/*" multiple>
                            <small class="form-text text-muted ml-3">image format .jpg,.png,.gif,.jpeg</small>
                            <span id="imageError" class="text-danger" style="max-width: 100%; height: auto;"></span>



                        </div>
                        <div class="col-md-10 row " style="display: block;">
                            <div class="image-preview-container" style="display: inline-block;">
                                <img id="imagePreview0" src="" alt="Image 1" class="src imagePreview img-fluid">
                            </div>
                            <div class="image-preview-container" style="display: inline-block;">
                                <img id="imagePreview1" src="" alt="Image 2" class="src imagePreview img-fluid">
                            </div>
                        </div>

                    </div>
                    <!-- <div class="col-md-5 mr-md-4 " style="display: none;">
                        <div class="card mb-4">
                            <div class="card-header">
                                <h4>Media</h4>
                            </div>
                            <div class="input-upload thumbimg ">
                                <input type="file" name="image" id="image" style="display:none;">

                                <button type="button" onclick="image.click();"
                                    class="btn st-cropper-select-btn btn-secondary btn-md">Select
                                    File</button>
                                <div class="showimg  d-flex justify-content-center pt-3">
                                    <div class="row imgdiv" id="imgdiv" style="">
                                        <img id="imagecan">
                                    </div>
                                </div>
                            </div>
                            <div class="modal-footer d-flex justify-content-center">
                                <button type="button" onclick="onClickUpload()"
                                    class="btn btn-primary st-cropper-upload-btn btn-md">Upload
                                    <i class="fa fa-spinner fa-spin showloading"
                                        style="color:white; font-size:12px; display:none;  position:absolute; margin-left: 3px; margin-top: 4px;"></i>
                                </button>
                                <button type="button" class="btn btn-secondary btn-md st-cropper-close-btn"
                                    data-dismiss="modal">Close</button>
                            </div>

                        </div>
                    </div>
                    <div class="col-md-5 mr-md-4 child-div" style="display:none;">
                        <div class="card mb-4">
                            <div class="card-header">
                                <h4>Media</h4>
                            </div>
                            <div class="input-upload">
                                <img src="/imgs/theme/upload.svg" id="imgView1" class="col-md-12 child-div" alt="">
                                <input class="form-control" id="input1" name="file"
                                    onchange="viewImage1(event),viewImage(event, 1)" type="file">
                            </div>
                            <div class="image-cropper" style="display:none;">
                                <img src="" id="croppedImg1" alt="" class="img-fluid">
                                <button type="button" id="saveButton1" class="btn-sm btn-primary">Save</button>
                            </div>

                        </div> card end// -->

                    <!-- </div> -->

                    <div class="row  justify-content-center" id="form-fields">

                    </div>
                    <div class="col-md-5 ml-md-4">
                        <div class="row">
                            <label for="exampleFormControl" class="mb-0 mt-1">Power Train</label>
                            <select id="discount" class="form-select form__input pt-4 mt-0 mb-4" name="PowerTrain">

                                <option value="Manual">Manual</option>
                                <option value="Electric">Electric</option>
                                <option value="Gasoline">Gasoline</option>
                                <option value="Stroller">Stroller</option>
                                <option value="Stroller & Manual">Stroller & Manual</option>

                            </select>
                        </div>
                    </div>

                    <div class="row  justify-content-center">
                        <div class="col-md-10 mr-md-4">
                            <div class="row">
                                <label for="exampleFormControl" class="mb-0 mt-1">Description</label>

                                <textarea name="Description" class="form__input mt-0 mb-4 " id="description" rows="4"
                                    oninput="descriptionValidation()" placeholder="text in less than 50 words"
                                    cols="100" form="addProduct">text in less than 50 words
                                </textarea>

                                <span id="descriptionError" class="text-danger"></span>
                            </div>
                        </div>

                    </div>
                    <div class="col-md-5 ml-md-4">
                        <button type="button" class="btn btn-primary mt-2" id="add-Color">Add More Color</button>

                    </div>


                    <input type="submit" value="Add Product" class="btn">
                </div>
            </form>
            <% if (message){%>
                <div class="row">
                    <p>Product Added</p>
                </div>
                <%}%>
                    <div class="row">
                        <p><a href="/admin/products">Back </a></p>
                    </div>

                    <!-- Footer -->
        </div>
        <script>
            const maxColors = 5;
            let colorCount = 1;

            document.getElementById('add-Color').addEventListener('click', function () {
                if (colorCount < maxColors) {
                    const formFields = document.getElementById('form-fields');
                    const newField = document.createElement('div');
                    newField.innerHTML = `<hr> <p style="color:#0c121c"><b>Field for new color</b></p><hr>       
  <div class="row  justify-content-center">
 <div class="col-md-5 mr-md-4">
    <div class="row">
        <label for="exampleFormControl" class="mb-0 mt-1">Color</label>
        <input type="name" name="Color" id="color${colorCount}" oninput="colorValidation(${colorCount})"
            class="form__input mt-0 mb-4" placeholder="Color">
        <span id="colorError${colorCount}" class="text-danger"></span>

    </div>
</div>
<div class="col-md-5 ml-md-4">
    <div class="row">
        <label for="exampleFormControl" class="mb-0 mt-1">Price</label>
        <input type="text" oninput="priceValidation(${colorCount})" name="Price" id="price${colorCount}"
            class="form__input mt-0 mb-4 price${colorCount}" placeholder="Price">
        <span id="priceError${colorCount}" class="text-danger"></span>

    </div>
</div>
<div class="col-md-5 mr-md-4">
    <div class="row">
        <label for="exampleFormControl" class="mb-0 mt-1">Available Stock</label>
        <input type="text" oninput="stockValidation(${colorCount})" name="Stock" id="stock${colorCount}"
            class="form__input mt-0 mb-4" placeholder="Stock">
        <span id="stockError${colorCount}" class="text-danger"></span>
    </div>
</div>
<div class="col-md-5 ml-md-4">
    <div class="row">
        <label for="exampleFormControl" class="mb-0 mt-1">Discount percentage</label>
        <select id="discount${colorCount}" 
            class="form-select form__input pt-4 mt-0 mb-4" name="Discount">
            <% for(let i=0;i<=80;i++){ %>
                <option value="<%= i%>">
                    <%= i%> %
                </option>
                <% } ; %>
        </select>
    </div>
</div>

<div class="col-md-5 mr-md-4">
                        <div class="row">
                            <label for="exampleFormControl" class="mb-0 mt-1">Offer End Date</label>
                            <input type="date"  name="EndDate" id="endDate${colorCount}"
                                class="form__input mt-0 mb-4" required/>
                            <span id="dateError" class="text-danger"></span>
                        </div>
                    </div>
<div class="col-md-10 ml-md-4">
                        <div class="row mt-2 ">

                            <label for="exampleFormControl" class="mb-0 mt-1">Upload Image</label>
                            <!-- <input type="file" accept="image/*" class="form-control-file ml-3" />
                            <small class="form-text text-muted ml-3">image format .jpeg</small> -->

                            <input id="image${colorCount}" name="Image" onchange="imageValidation()" class="form-control-file ml-3"
                                type="file" accept="image/*" multiple>
                            <small class="form-text text-muted ml-3">image format .jpg,.png,.gif,.jpeg</small>
                            <span id="imageError" class="text-danger" style="max-width: 100%; height: auto;"></span>



                        </div>
                        <div class="col-md-10 row " style="display: block;">
                            <div class="image-preview-container" style="display: inline-block;">
                                <img id="imagePreview0" src="" alt="Image Preview" class="src imagePreview img-fluid">
                            </div>
                            <div class="image-preview-container" style="display: inline-block;">
                                <img id="imagePreview1" src="" alt="Image Preview" class="src imagePreview img-fluid">
                            </div>
                            <div class="image-preview-container" style="display: inline-block;">
                                <img id="imagePreview2" src="" alt="Image Preview" class="src imagePreview img-fluid">
                            </div>
                        </div>



                    </div>
                   <div class="col-md-5 ml-md-4">
<button type="button" class="btn btn-danger mt-0 mb-4 btn-remove">Remove Addition color field</button>
    </div>
`;
                    //console.log(document.getElementById(`subField${colorCount}`));
                    formFields.appendChild(newField);

                    // Add event listener to remove button
                    const removeButton = newField.querySelector('.btn-remove');
                    removeButton.addEventListener('click', function () {
                        formFields.removeChild(newField);
                        colorCount--;
                    });
                    colorCount++;
                } else {
                    alert('Maximum number of fields reached (5)');
                }
            });
            //imageValidation
            const previewContainer = document.querySelector('.image-preview-container');
            const previewImage0 = document.querySelector('#imagePreview0');
            const previewImage1 = document.querySelector('#imagePreview1');
            //  const previewImage2 = document.querySelector('#imagePreview2');

            function finalImageValidation(count) {
                var fileInput = document.getElementById('image');

                var filePath = fileInput.value;
                var allowedExtensions = /(\.jpg|\.jpeg|\.png|\.gif)$/i;
                if (fileInput.files.length !== 2) {
                    erer.innerHTML = 'the number of images should be 2'
                    return false;
                }
                if (!allowedExtensions.exec(filePath)) {
                    var erer = document.getElementById('imageError');
                    erer.innerHTML = '<i class="fa fa-close"></i> Sorry, only accepted files are .jpg,.png,.gif,.jpeg ';
                    fileInput.value = '';
                    return false;
                } else {
                    //  console.log("image validated")
                    return true
                }
            }

            function subValidation() {
                let SubCategory = document.getElementById('Sub-Category');
                if (SubCategory.value === '') {
                    let subError = document.getElementById('subError');
                    subError = "select sub category"
                    return false
                }
                subError = ""
                return true
            }

            function imageValidation(count) {
                var fileInput = document.getElementById('image');
                //  let    imagesPreview = document.getElementById('imagePreview');
                imagePreview0.innerHTML = '';
                imagePreview1.innerHTML = ''; // Clear previous previews
                var filePath = fileInput.value;
                var erer = document.getElementById('imageError');

                var allowedExtensions = /(\.jpg|\.jpeg|\.png|\.gif)$/i;
                if (fileInput.files.length !== 2) {
                    erer.innerHTML = 'the number of images should be 2'
                    return false;
                }
                for (var i = 0; i < fileInput.files.length; i++) {
                    var filePath = fileInput.files[i].name;

                    if (!allowedExtensions.exec(filePath)) {
                        erer.innerHTML = '<i class="fa fa-close"></i> Sorry, only accepted files are .jpg,.png,.gif,.jpeg ';
                        fileInput.value = '';
                        return false;
                    } else {
                        //Image preview
                        if (fileInput.files && fileInput.files[i]) {
                            document.getElementById(`imagePreview${i}`).src = URL.createObjectURL(event.target.files[i])
                            previewContainer.style.display = 'block'; // Show the preview container
                            switch (i) {
                                case 0:
                                    previewImage0.style.display = 'block';
                                case 1:
                                    previewImage1.style.display = 'block'
                            }
                        }
                    }
                }
            }

            const subCategory = document.getElementById("Sub-Category")

            function callSub(category) {
                // console.log("bbb")
                axios.get(`/admin/getSubCategory/` + category).then((sub) => {
                    // subCategory.innerHTML=sub.data
                    let Sub = sub.data

                    let resultHTML = "";
                    for (let i = 0; i < Sub.length; i++) {
                        resultHTML += "<option value='" + sub.data[i]._id + "'>" + sub.data[i].Sub + "</option>";
                    }
                    subCategory.innerHTML = resultHTML
                })

                // console.log(sub.data)
            }

            const name = document.getElementById("name")
            const brand = document.getElementById('brand')
            const category = document.getElementById('category')
            const discount = document.getElementById('discount')
            const stock = document.getElementById('stock')



            const namePattern = /^[A-Za-z0-9' ]{1,20}$/;
            const pricePattern = /^\d{0,8}(\.\d{1,2})?$/
            const dimensionPattern = /^[1-9]\d{0,4}$/
            const discountPattern = /^80|[1-7]?[0-9]$/


            async function productNameValidation() {
                const nameValue = name.value
                const inputField = name
                const outputField = productError
                const outputMessage = "Product "
                const outputMessage2 = ''
                const regex = namePattern
                if (await patternValidation(nameValue, inputField, outputField, outputMessage, regex, outputMessage2)) {
                    // console.log("product name true")
                    return true
                } else {
                    //console.log("product name false")
                    return false
                }
            }

            // pattern validation
            function patternValidation(value, inputField, outputField, outputMessage, regex, outputMessage2) {
                // console.log(value, "String", typeof value)
                // console.log(value, "Number", value instanceof Number)
                if (value.trim() == 0) {
                    inputField.style.color = "red";
                    outputField.style.color = "red";
                    outputField.innerHTML = outputMessage + " field can not be blank"
                    return false;
                }
                // console.log(value.trim())
                if (!value.match(regex)) {
                    inputField.style.color = "red";
                    outputField.style.color = "red";
                    outputField.innerHTML = "Invalid Input,  " + outputMessage2
                    return false;
                }

                inputField.style.color = "#1e3932";
                outputField.innerHTML = ""

                return true
            }




            //priceValidation
            async function priceValidation(count) {
                let price = document.getElementById('price')

                let priceValue = price.value
                let priceError = document.querySelector(`#priceError`)
                let inputField = price
                let outputField = priceError
                if (count) {

                    price = document.querySelector(`#price${count}`)
                    //  if (price == null) { priceValue = '' } else { priceValue = price.value }
                    priceValue = price.value
                    priceError = document.querySelector(`#priceError${count}`)
                    inputField = price
                    outputField = priceError
                }
                const regex = pricePattern
                const outputMessage = "Price"
                const outputMessage2 = "only numbers, no decimals,if the price is higher than 5Lk Contact Us"
                if (await patternValidation(priceValue, inputField, outputField, outputMessage, regex, outputMessage2)) {
                    return true
                } else {
                    return false
                }
            }

            //colorValidation
            async function colorValidation(count) {
                let color = document.getElementById('color')

                let colorValue = color.value
                let colorError = document.querySelector(`#colorError`)
                let inputField = color
                let outputField = colorError
                if (count) {

                    color = document.querySelector(`#color${count}`)
                    //if (color === null) { colorValue = '' } else { colorValue = color.value }
                    colorValue = color.value
                    colorError = document.querySelector(`#colorError${count}`)
                    inputField = color
                    outputField = colorError
                    // console.log(count)
                }
                const regex = namePattern
                const outputMessage = "color"
                const outputMessage2 = ""
                if (await patternValidation(colorValue, inputField, outputField, outputMessage, regex, outputMessage2)) {
                    return true
                } else {
                    return false
                }
            }


            //lenghtValidation
            async function lenghtValidation() {
                let length = document.getElementById('length')

                let lengthValue = length.value
                let priceError = document.querySelector(`#dimensionsError`)
                let inputField = length
                let outputField = dimensionsError
                const regex = dimensionPattern
                const outputMessage = "Length"
                const outputMessage2 = "Length "
                if (await patternValidation(lengthValue, inputField, outputField, outputMessage, regex, outputMessage2)) {
                    return true
                } else {
                    return false
                }

            }
            //widthValidation
            async function widthValidation() {
                let width = document.getElementById('width')

                let widthValue = width.value
                let priceError = document.querySelector(`#dimensionsError`)
                let inputField = width
                let outputField = dimensionsError
                const regex = dimensionPattern
                const outputMessage = "width"
                const outputMessage2 = " Width"
                if (await patternValidation(widthValue, inputField, outputField, outputMessage, regex, outputMessage2)) {
                    return true
                } else {
                    return false
                }

            }

            //heightValidation
            async function heightValidation() {
                let height = document.getElementById('height')

                let heightValue = height.value
                let priceError = document.querySelector(`#dimensionsError`)
                let inputField = height
                let outputField = dimensionsError
                const regex = dimensionPattern
                const outputMessage = "height"
                const outputMessage2 = " height"
                if (await patternValidation(heightValue, inputField, outputField, outputMessage, regex, outputMessage2)) {
                    return true
                } else {
                    return false
                }

            }


            //stockValidation
            async function stockValidation(count) {
                let stock = document.getElementById('stock')

                let stockValue = stock.value
                let stockError = document.querySelector(`#stockError`)
                let inputField = stock
                let outputField = stockError
                if (count) {

                    stock = document.querySelector(`#stock${count}`)
                    // if (stock === null) { stockValue = '' } else { stockValue = stock.value }
                    stockValue = stock.value
                    // console.log(stockValue)
                    stockError = document.querySelector(`#stockError${count}`)
                    inputField = stock
                    outputField = stockError
                }
                const regex = dimensionPattern
                const outputMessage = "stock"
                const outputMessage2 = ""
                if (await patternValidation(stockValue, inputField, outputField, outputMessage, regex, outputMessage2)) {
                    return true
                } else {
                    return false
                }
            }
            //discountValidation
            async function discountValidation(count) {
                let discount = document.getElementById('discount')

                let discountValue = discount.value
                let discountError = document.querySelector(`#discountError`)
                let inputField = discount
                let outputField = discountError
                if (count) {

                    discount = document.querySelector(`#discount${count}`)
                    discountValue = discount.value
                    // if (discount === null) { discountValue = '' } else { discountValue = discount.value }
                    // console.log(discountValue)
                    discountError = document.querySelector(`#discountError${count}`)
                    inputField = discount
                    outputField = discountError
                }
                const regex = discountPattern
                const outputMessage = "discount"
                const outputMessage2 = ""
                if (await patternValidation(discountValue, inputField, outputField, outputMessage, regex, outputMessage2)) {
                    return true
                } else {
                    return false
                }
            }

            //number validation
            function numberValidation(value, inputField, outputField, outputMessage, regex, outputMessage2) {
                if (value.length == 0) {
                    inputField.style.color = "red";
                    outputField.style.color = "red";
                    outputField.innerHTML = outputMessage + " field can not be blank"
                    return false;
                }
                if (!value.match(regex)) {
                    inputField.style.color = "red";
                    outputField.style.color = "red";
                    outputField.innerHTML = "Invalid Input,  " + outputMessage2
                    return false;
                }

                //console.log("dhasfsguyjhkdsfj")
                inputField.style.color = "#1e3932";
                outputField.innerHTML = ""

                return true
            }



            //manufacture Validation
            async function manufacturerValidation() {
                const manufacturerValue = manufacturer.value
                const inputField = manufacturer
                const outputField = manufacturerError
                const regex = namePattern
                const outputMessage = "Manufactured"
                const outputMessage2 = ''
                if (await patternValidation(manufacturerValue, inputField, outputField, outputMessage, regex, outputMessage2)) {
                    return true
                } else { return false }
            }



            async function categoryValidation() {
                const categoryValue = category.value
                const inputField = category
                const outputField = categoryError
                const regex = "Open this select menu"
                const outputMessage = "Category"
                const outputMessage2 = 'Select a Category'
                if (categoryValue.match(regex)) {
                    inputField.style.color = "red";
                    outputField.style.color = "red";
                    outputField.innerHTML = "Invalid Input,  " + outputMessage2
                    return false;
                }

                inputField.style.color = "#1e3932";
                outputField.innerHTML = ""

                return true
            }


            async function scriptValidation() {
                // console.log("scriptVslifation call")
                // console.log(colorCount)
                for (let i = 1; i < colorCount; i++) {
                    if (!(await colorValidation(i)) || !(await priceValidation(i)) || !(await stockValidation(i)) || !(await finalImageValidation(i))) {
                        return false
                    }
                }
                return true
            }

            //addProductFormValidation onsubmit
            async function addProductFormValidation(event) {
                event.preventDefault()
                // await console.log("product", !(await productNameValidation()))
                // await console.log("manufacturer", !(await manufacturerValidation()))
                // await console.log("category", !(await categoryValidation()))
                // await console.log("price", !(await priceValidation()))
                if (!(await productNameValidation()) || !(await manufacturerValidation()) || !(await categoryValidation()) || !(await priceValidation()) || !(await finalImageValidation()) || !(await subValidation())) {
                    console.log("generalValidation")
                    return false
                }
                if (colorCount > 1) {
                    if (!(await scriptValidation())) {
                        console.log("scripptValidation")
                        return false
                    }
                }
                console.log("submition")
                document.getElementById("addProduct").submit();

                return true

            }
            // function viewImage1(event) {
            //     document.getElementById('imgView1').src = URL.createObjectURL(event.target.files[0])
            // }
            // function viewImage(event, index) {
            //     console.log("viewImage called");

            //     let input = event.target;
            //     let reader = new FileReader();

            //     reader.onload = function () {
            //         let dataURL = reader.result;
            //         let image = document.getElementById('imgView' + index);
            //         image.src = dataURL;

            //         // Initialize Cropper.js on the image
            //         let cropper = new Cropper(image, {
            //             aspectRatio: 1 / 1, // Set the aspect ratio to 1:1 for square images
            //             viewMode: 1, // Set the view mode to crop box
            //             guides: true, // Show the crop guides
            //             background: false, // Do not show the background behind the image
            //             autoCropArea: 1, // Set the initial crop area to cover the whole image
            //             zoomable: true // Disable zooming to keep the image size fixed
            //         });

            //         // Show the image cropper container
            //         let cropperContainer = document.querySelector('#croppedImg' + index).parentNode;
            //         cropperContainer.style.display = 'block';

            //         // Update the cropped image when the "Save" button is clicked
            //         let saveButton = document.querySelector('#saveButton' + index);
            //         saveButton.addEventListener('click', async function () {
            //             let croppedCanvas = cropper.getCroppedCanvas({
            //                 width: 1500,
            //                 height: 1500
            //             });
            //             let croppedImage = document.getElementById("croppedImg" + index);
            //             croppedImage.src = croppedCanvas.toDataURL('image/jpeg', 1.0);

            //             // Generate a unique name for the cropped image file based on the current timestamp
            //             let timestamp = new Date().getTime();
            //             let fileName = `cropped-img-${timestamp}-${index}.png`;

            //             await croppedCanvas.toBlob(blob => {
            //                 let input = document.getElementById('input' + index)
            //                 let imgFile = new File([blob], fileName, blob)
            //                 const fileList = new DataTransfer();
            //                 fileList.items.add(imgFile);
            //                 input.files = fileList.files
            //             });
            //             //cropperContainer.style.display = 'none';
            //         });

            //     }
            //     reader.readAsDataURL(input.files[0]);
            // }


        </script>

    </body>

    </html>